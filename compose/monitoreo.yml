# 
# Conjunto de servidores que funcionan para hacer monitoreo de equipos

version: '3.8'

# Le doy un nombre descriptivo al stack para saber de que se trata
name: monitoreo

services:
  # Base de datos para utilizar con grafana, sirve para recolectar datos de varias fuentes
  # https://prometheus.io/docs/prometheus/latest/installation/
  # https://docker-ip:9090/
  prometheus:
    # Confiuracion del dock
    container_name: prometheus
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    # 
    # ports:
     # - '9090:9090'
    restart: always
    # Configuracion de discos
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - prometheus-config:/etc/prometheus
      - prometheus-data:/prometheus
    depends_on:
      - node-exporter
      - blackbox-exporter
      - cadvisor
    # Le doy un nombre al stack para referirlo con NPM y le damos la red correspondiente
    hostname: prometheus
    networks:
      lan_docker:
        # ipv4_address: 192.168.200.254
  # FIN prometheus

  # Stack para habilitar el monitoreo en un servidor grafana ya funcionando
  # Al igual que otros stacks esta con la configurcion de IP definida
  # Con esto vamos a obtener informacion de la maquina
  # https://github.com/prometheus/node_exporter
  # https://prometheus.io/docs/guides/node-exporter/
  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    restart: unless-stopped
    # Para que se pueda conectar tenemos que exponer el puerto
    # ports:
      # - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    # Le doy un nombre al stack para referirlo con NPM y le damos la red correspondiente
    hostname: node-exporter
    networks:
      lan_docker:
  # FIN node-exporter

  # Con esto vamos a obtener informacion de la pagina web
  # https://github.com/prometheus/blackbox_exporter
  # https://github.com/prometheus-community/prometheus-playground/blob/master/blackbox-exporter/docker-compose.yml
  blackbox-exporter:
    container_name: blackbox-exporter
    image: prom/blackbox-exporter:latest
    restart: unless-stopped
    # Para que se pueda conectar tenemos que exponer el puerto
    # ports:
      # - '9115:9115'
    # Le doy un nombre al stack para referirlo con NPM y le damos la red correspondiente
    hostname: blackbox-exporter
    networks:
      lan_docker:
  # FIN blackbox-exporter

  # Este contenedor es el que va a monitoreear docker
  # https://prometheus.io/docs/guides/cadvisor/#docker-compose-configuration
  # https://grafana.com/grafana/dashboards/893-main/
  # https://github.com/google/cadvisor
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor #google/cadvisor:latest
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    # Para que se pueda conectar tenemos que exponer el puerto
    # ports:
      # - '8080:8080'
    # Le doy un nombre al stack para referirlo con NPM y le damos la red correspondiente
    hostname: cadvisor
    networks:
      lan_docker:
  # FIN cadvisor

  # Motor para crear graficos y dashboards desde distintos servicios, proetheus, loki, zabbix, etc
  # https://grafana.com/docs/grafana/latest/setup-grafana/installation/docker/
  # https://docker-ip:3000/
  # Usuario y pass: admin
  grafana:
    # Confiuracion del dock
    container_name: grafana
    image: grafana/grafana-oss
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM
    # ports:
      # - "3000:3000"
    restart: always
    # Hago varias configuraciones interesantes
    environment:
      # Le doy una url para que sea mas facil ingresar
      - GF_SERVER_ROOT_URL=http://grafana.strong.local/
      # Plugin de un reloj bastante configurable, tambien el plugin para tener datos desde zabbix
      - GF_INSTALL_PLUGINS=grafana-clock-panel, alexanderzobnin-zabbix-app
    # Configuracion de discos
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    # Le doy un nombre al stack para referirlo con NPM y le damos la red correspondiente
    hostname: grafana
    networks:
      lan_docker:
  # FIN grafana

# Declaramos la red que vamos a utilizar
networks:
  # Configuracion de la red lan_docker
  lan_docker:
    external: true

# Como hago uso de los volumenes aca hago las declaraciones
# Es muy importante que los directorios existan para que el stack funcione
volumes:
  # Volumen ara guardar la configuracion
  prometheus-config:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: /mnt/docker-data/prometheus/config
      o: bind
    name: prometheus-config
  # Volumen ara guardar los datos de prometheus
  prometheus-data:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: /mnt/docker-data/prometheus/data
      o: bind
    name: prometheus-data
  # Volumen ara guardar los datos de grafana
  grafana-data:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: /mnt/docker-data/grafana-data
      o: bind
    name: grafana-data
