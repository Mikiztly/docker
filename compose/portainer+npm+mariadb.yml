# COMPROBADO
# Son cuatro servicios para manejar docker: portainer + mariadb + phpmyadmin + nginx-proxy-manager
# En resumen es una mezcla de los tres contenedores que ya tengo funcionando con la
# diferencia que configuro la red de forma manual, esto me da la ventaja de usar los
# nombres de host en vez de IP y tambien puedo conectarme a los servidores desde otro
# Docker. Por ejemplo voy a tener un solo servidor mariadb para todas los servicios

version: '3.8'

# Le doy un nombre descriptivo para saber que es en portainer
name: administracion

services:
  # Creamos el dock de portainer con una red propia para que se utilice con npm
  # https://docs.portainer.io/start/install-ce/server/swarm/linux -> Comunity Edition
  # https://docs.portainer.io/start/install/server/swarm/linux -> Business Edition
  # https://github.com/portainer/portainer-compose/tree/master
  # https://cursosdedesarrollo.com/2022/01/nginx-proxy-manager-o-la-manera-sencilla-de-manejar-acceso-a-tus-servicios-docker/
  # https://docker-ip:9443/
  portainer:
    # Confiuracion del dock
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: always
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM
    # ports:
      # - "9000:9000"
      # - "9443:9443"
      # - "8000:8000"
    # Configuracion de discos
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - portainer-data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    # Configuramos una IP estatica para el dock
    hostname: portainer
    networks:
      lan_docker:
        ipv4_address: 192.168.200.254

  # Ahora creamos el servidor mariadb para que se conecten las aplicaciones, declaramos una
  # coneccion para npm que funciona en conjunto con este compose, ademas le agrego phpmyadmin
  # para poder manejar las BD de forma facil.
  # Base de datos
  mariadb:
    container_name: mariadb
    image: mariadb:latest
    restart: always
    # Configuramos el password de root y del usuario npm para conectarse a la DB
    environment:
      MYSQL_ROOT_PASSWORD: CambiaMe
      MYSQL_DATABASE: npm
      MYSQL_USER: npm
      MYSQL_PASSWORD: npm
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM
    # ports:
      # - '3306:3306'
    # Configuracion de discos
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - mariadb-data:/var/lib/mysql
    # Configuramos una IP estatica para el dock en la red portainer
    hostname: mariadb
    networks:
      lan_docker:
        ipv4_address: 192.168.200.253

  # phpmyadmin para manejar la DB
  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin
    restart: always
    # Comfiguramos el nombre del servidor de BD, no configuro usuario y password por razones de seguridad
    environment:
      PMA_HOST: mariadb
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM
    # ports:
      # - '8100:80'
    depends_on:
      - mariadb
    # Configuramos una IP estatica para el dock
    hostname: phpmyadmin
    networks:
      lan_docker:
        ipv4_address: 192.168.200.252

  # Creamos nginx-proxy-manager para vincular la red con portainer y mariadb
  # https://nginxproxymanager.com/setup/
  # https://github.com/NginxProxyManager/nginx-proxy-manager
  # Credenciales por defecto
  # Email: admin@example.com
  # Password: changeme
  npm:
    container_name: npm
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    # Estos son los unicos puertos a declara para que funcione todo con el proxy NPM
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      # Coneccion a la base de datos
      # Esta configuracion es para conectarse a la DB creada anteriormente
      DB_MYSQL_HOST: "mariadb"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
      # Uncomment this if IPv6 is not enabled on your host
      DISABLE_IPV6: 'true'
    # Configuracion de discos
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - npm-data:/data
      - letsencrypt:/etc/letsencrypt
    depends_on:
      - mariadb
    # Configuramos una IP estatica para el dock
    hostname: npm
    networks:
      lan_docker:
        ipv4_address: 192.168.200.251

# Declaramos la red que vamos a utilizar
networks:
  # Configuracion de la red lan_docker
  lan_docker:
    name: lan_docker
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.200.0/24
          gateway: 192.168.200.1

# Como hago uso de los volumenes aca hago las declaraciones
# Es muy importante que los directorios existan para que el stack funcione
volumes:
  # Volumen ara guardar los datos de Portainer
  portainer-data:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: /mnt/docker-data/portainer-data
      o: bind
    name: portainer-data
  # Volumen ara guardar los datos de mariadb
  mariadb-data:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: /mnt/docker-data/mariadb-data
      o: bind
    name: mariadb-data
  # Volumen ara guardar los datos de nginx-proxy-manager
  npm-data:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: /mnt/docker-data/npm-data
      o: bind
    name: npm-data
  letsencrypt:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: /mnt/docker-data/letsencrypt
      o: bind
    name: letsencrypt
